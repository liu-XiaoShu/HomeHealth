# Generated by Django 4.2.20 on 2025-04-01 07:10

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text='用户的联系电话，用于紧急联系和找回密码', max_length=20, null=True, verbose_name='手机号码')),
                ('birth_date', models.DateField(blank=True, error_messages={'invalid': '请输入有效的日期格式（YYYY-MM-DD）'}, help_text='格式：YYYY-MM-DD，用于计算年龄和健康评估', null=True, verbose_name='出生日期')),
                ('blood_type', models.CharField(blank=True, choices=[('A', 'A型'), ('B', 'B型'), ('AB', 'AB型'), ('O', 'O型')], default='', help_text='请从下拉列表中选择正确的血型分类', max_length=5, verbose_name='血型')),
                ('hobbies', models.TextField(blank=True, help_text='用逗号分隔多个爱好（例如：游泳, 阅读，最多200字）', max_length=200, null=True, verbose_name='兴趣爱好')),
                ('emergency_contact', models.CharField(blank=True, help_text='格式：姓名-关系-联系电话（例如：张三-父亲-13800138000）', max_length=100, validators=[django.core.validators.RegexValidator(message='格式错误。请使用"姓名-关系-手机号"格式，例如：张三-父亲-13800138000', regex='^[\\u4e00-\\u9fa5]{2,10}-[\\u4e00-\\u9fa5]{2,10}-1[3-9]\\d{9}$')], verbose_name='紧急联系人')),
            ],
            options={
                'verbose_name': '用户健康档案',
                'verbose_name_plural': '用户健康档案',
                'ordering': ['-date_joined'],
                'permissions': [('can_manage_users', '可以管理普通用户权限')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FamilyRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation_type', models.CharField(choices=[('parent', '父母'), ('child', '子女'), ('spouse', '配偶'), ('sibling', '兄弟姐妹'), ('other', '其他关系')], help_text='请选择最准确的关系描述', max_length=20, verbose_name='关系类型')),
                ('verified', models.BooleanField(default=False, help_text='表示对方是否确认此关系', verbose_name='已验证')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='关系记录的创建时间', verbose_name='建立时间')),
                ('from_user', models.ForeignKey(help_text='选择要建立关系的主体用户', on_delete=django.db.models.deletion.CASCADE, related_name='from_relationships', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
                ('to_user', models.ForeignKey(help_text='选择要关联的家庭成员', on_delete=django.db.models.deletion.CASCADE, related_name='to_relationships', to=settings.AUTH_USER_MODEL, verbose_name='家庭成员')),
            ],
            options={
                'verbose_name': '家庭成员关系',
                'verbose_name_plural': '家庭成员关系',
                'ordering': ['-created_at'],
                'unique_together': {('from_user', 'to_user', 'relation_type')},
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='family_members',
            field=models.ManyToManyField(blank=True, help_text='通过下方家庭成员关系表管理关联', through='users.FamilyRelationship', to=settings.AUTH_USER_MODEL, verbose_name='家庭成员'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='custom_user_set', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
